// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "debian-openssl-3.0.x", "linux-arm64-openssl-3.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL_DEV")
}

enum Role {
  CUSTOMER
  ADMIN
  SUPPLIER
  EMPLOYEE
}

enum OrderState {
  ORDER_PLACED
  IN_PROGRESS
  DISPATCHED
  DELIVERED
  ORDER_COLLECTED
}

enum BusinessSector {
  AGRICULTURE
  CONSTRUCTION
  EDUCATION
  FINANCE
  HEALTH
  HOSPITALITY
  IT
  MANUFACTURING
  OTHER
  RETAIL
  TECHNOLOGY
  TOURISM
  TRANSPORTATION
}

model Customer {
  customerId        String    @id @default(uuid()) @db.Uuid
  customerReference Int       @unique() 
  email             String    @unique
  phoneNumber       String    @db.VarChar(15)
  password          String    @db.VarChar(255)
  firstName         String?   @db.VarChar(255)
  lastName          String    @db.VarChar(255)
  companyNumber     String?   @db.VarChar(255)
  modifiedAt        DateTime? @default(dbgenerated("null")) @updatedAt
  deleted           Boolean   @default(false)
  signedUp          DateTime  @default(now())
  avatarPath        String?   @db.VarChar(255)
  addressId         String    @db.Uuid

  businessSector BusinessSector?
  address        Address           @relation(fields: [addressId], references: [addressId])
  cart           Cart?
  orders         Order[]
  history        CustomerHistory[]

  @@map("customers")
}

model CustomerHistory {
  historyId         String    @id @default(uuid()) @db.Uuid
  customerReference Int        
  email             String
  phoneNumber       String    @db.VarChar(15)
  password          String    @db.VarChar(255)
  firstName         String?   @db.VarChar(255)
  lastName          String    @db.VarChar(255)
  companyNumber     String?   @db.VarChar(255)
  modifiedAt        DateTime? @default(dbgenerated("null")) @updatedAt
  deleted           Boolean   @default(false)
  signedUp          DateTime  @default(now())
  avatarPath        String?   @db.VarChar(255)
  addressId         String    @db.Uuid

  businessSector BusinessSector?
  customer       Customer        @relation(fields: [customerReference], references: [customerReference])

  @@map("customerHistory")
}

model Address {
  addressId    String    @id @default(uuid()) @db.Uuid // Unique ID for easier referencing
  city         String    @db.VarChar(100)
  country      String    @db.VarChar(40)
  postCode     String    @db.VarChar(10)
  state        String    @db.VarChar(40)
  streetName   String    @db.VarChar(255)
  streetNumber String    @db.VarChar(30)
  modifiedAt   DateTime? @default(dbgenerated("null")) @updatedAt
  deleted      Boolean   @default(false)

  customers       Customer[]
  siteConfig      SiteConfig[]

  @@map("addresses") // Removed unique constraint
}

model Cart {
  cartId            String           @id @default(uuid()) @db.Uuid
  customerReference Int?             @unique
  customer          Customer?        @relation(fields: [customerReference], references: [customerReference])
  products          CartOnProducts[]

  @@map("carts")
}

model Product {
  productId   String    @id @default(uuid()) @db.Uuid
  name        String    @db.VarChar(255)
  price       Int //price in cents 
  description String    @db.VarChar(255)
  stock       Int //amount in stock 
  imagePath   String?   @db.VarChar(255)
  createdAt   DateTime  @default(now())
  modifiedAt  DateTime? @default(dbgenerated("null")) @updatedAt
  deleted     Boolean   @default(false)

  categories CategoriesOnProducts[]
  carts      CartOnProducts[]
  orders     OrderOnProducts[]

  @@map("products")
}

model Category {
  categoryId String  @id @default(uuid()) @db.Uuid
  name       String  @unique @db.VarChar(255)
  imagePath  String? @db.VarChar(255) // probably should be paths for multiple images
  deleted    Boolean @default(false)

  products CategoriesOnProducts[]

  @@map("categories")
}

//TODO
model Order {
  orderId           String     @id @default(uuid()) @db.Uuid
  customerReference Int        
  orderDate         DateTime   @default(now())
  deliveryDate      DateTime?
  deleted           Boolean    @default(false)
  orderState        OrderState @default(ORDER_PLACED)
  selfCollect       Boolean    @default(false)

  customer Customer          @relation(fields: [customerReference], references: [customerReference])
  products OrderOnProducts[]
  invoice  Invoice?
  route    RoutesOnOrders[]
  // history  RouteOrderHistory[]

  @@map("orders")
}

// TODO
model Invoice {
  invoiceId     String    @id @default(uuid()) @db.Uuid
  orderId       String    @unique @db.Uuid
  invoiceAmount Int //price in cents
  paymentDate   DateTime? @default(now())
  pdfUrl        String    @db.VarChar(255)
  deleted       Boolean   @default(false)

  order Order @relation(fields: [orderId], references: [orderId])

  @@map("invoices")
}

//TODO
model Route {
  routeId String           @id @default(uuid()) @db.Uuid
  name    String           @db.VarChar(255)
  deleted Boolean          @default(false)
  order   RoutesOnOrders[]
  // history RouteOrderHistory[]

  @@map("routes")
}

//TODO
model Employees {
  employeeId String  @id @default(uuid()) @db.Uuid
  email      String  @unique @db.VarChar(255)
  password   String  @db.VarChar(255)
  firstName  String  @db.VarChar(255)
  lastName   String  @db.VarChar(255)
  deleted    Boolean @default(false)
  role       Role    @default(EMPLOYEE)

  @@map("employees")
}

//* model for the site configuration
model SiteConfig {
  siteConfigId String @id @default(uuid()) @db.Uuid
  companyName  String @db.VarChar(255)
  //? should probably also have a slogan or a short description field
  //? should probalby also have a relation to a socialMedia model with links to social media

  logoPath         String    @db.VarChar(255)
  email            String    @unique @db.VarChar(255)
  phoneNumber      String    @db.VarChar(15)
  iban             String    @db.VarChar(40)
  companyNumber    String    @db.VarChar(255)
  addressId        String    @db.Uuid
  modifiedAt       DateTime? @default(dbgenerated("null")) @updatedAt
  isPremium        Boolean   @default(false)
  deleted          Boolean   @default(false)
  stripeCustomerId String?   @db.VarChar(255)
  stripeAccountId  String?   @db.VarChar(255)
  stripeConfigured Boolean   @default(false)
  address          Address   @relation(fields: [addressId], references: [addressId])

  @@map("siteConfigs")
}

// realtion models
model CategoriesOnProducts {
  productId  String   @db.Uuid
  product    Product  @relation(fields: [productId], references: [productId])
  categoryId String   @db.Uuid
  category   Category @relation(fields: [categoryId], references: [categoryId])

  @@id([productId, categoryId])
  @@map("categoriesProducts")
}

model CartOnProducts {
  cartId    String  @db.Uuid
  cart      Cart    @relation(fields: [cartId], references: [cartId])
  productId String  @db.Uuid
  product   Product @relation(fields: [productId], references: [productId])
  quantity  Int     @default(1) @map("productAmount")

  @@id([cartId, productId])
  @@map("cartsProducts")
}

model OrderOnProducts {
  orderId       String  @db.Uuid
  order         Order   @relation(fields: [orderId], references: [orderId])
  productId     String  @db.Uuid
  product       Product @relation(fields: [productId], references: [productId])
  orderDate     DateTime @default(now())
  productAmount Int     @default(1)

  @@id([orderId, productId])
  @@map("ordersProducts")
}

model RoutesOnOrders {
  routeId String @db.Uuid
  route   Route  @relation(fields: [routeId], references: [routeId])
  orderId String @db.Uuid
  order   Order  @relation(fields: [orderId], references: [orderId])

  @@id([routeId, orderId])
  @@map("routesOrders")
}

// model RouteOrderHistory {
//   historyId String @id @default(uuid()) @db.Uuid
//   routeId             String @db.Uuid
//   orderId             String @db.Uuid
//   deleted             Boolean @default(false)

//   route Route @relation(fields: [routeId], references: [routeId])
//   order Order @relation(fields: [orderId], references: [orderId])

//   @@map("routeOrderHistory")
// }